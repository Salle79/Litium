{"version":3,"sources":["webpack:///./Scripts/constants.js","webpack:///./Scripts/Components/AddressList.js","webpack:///./Scripts/Components/AddressForm.js","webpack:///./Scripts/Containers/AddressList.container.js"],"names":["window","__litium","AddressList","props","state","removingRow","rowSystemId","showDeleteButton","this","setState","previousState","addresses","onEdit","onRemove","className","translate","address","key","systemId","zipCode","city","onClick","title","onRemoveRequest","Component","AddressForm","errors","onDismiss","onChange","onSubmit","htmlFor","id","name","type","autoComplete","value","event","target","address2","country","constants","countries","text","phoneNumber","addressSchema","object","shape","string","required","nullable","AddressListContainer","person","query","changeMode","propName","prevState","validate","then","edit","add","error","setError","mode","showList","handleAddressInputChange","onAddressSubmit","showForm","remove","connect","myPage","list","dispatch","addressSystemId"],"mappings":"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","file":"4.75909d5a6c2fc0619dff.js","sourcesContent":["export default window.__litium.constants;","import React, { Component, Fragment } from 'react';\r\nimport { translate } from '../Services/translation';\r\n\r\nclass AddressList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            removingRow: {},\r\n        };\r\n    }\r\n\r\n    onRemoveRequest(rowSystemId, showDeleteButton) {\r\n        this.setState(previousState => ({\r\n            ...previousState,\r\n            removingRow: {\r\n                ...previousState.removingRow,\r\n                [rowSystemId]: showDeleteButton,\r\n            }\r\n        }));\r\n    }\r\n\r\n    render () {\r\n        const { addresses, onEdit, onRemove } = this.props;\r\n        const { removingRow } = this.state;\r\n        return (\r\n            <div className=\"simple-table\">\r\n                <div className=\"row medium-unstack no-margin simple-table__header\">\r\n                    <div className=\"columns\">{translate('mypage.address.address')}</div>\r\n                    <div className=\"columns\">{translate('mypage.address.postnumber')}</div>\r\n                    <div className=\"columns\">{translate('mypage.address.city')}</div>\r\n                    <div className=\"columns medium-2 hide-for-small-only\"></div>\r\n                </div>\r\n\r\n                {addresses && addresses.map((address)=> (\r\n                    <div className=\"row medium-unstack no-margin\" key={`${address.systemId}`}>\r\n                        <div className=\"columns\">{address.address}</div>\r\n                        <div className=\"columns\">{address.zipCode}</div>\r\n                        <div className=\"columns\">{address.city}</div>\r\n                        <div className=\"columns medium-2\">\r\n                            <a className=\"table__icon table__icon--edit\" onClick={() => onEdit(address)} title={translate('Edit')}></a>\r\n                            {!removingRow[address.systemId] && <a className=\"table__icon table__icon--delete\" onClick={() => this.onRemoveRequest(address.systemId, true)} title={translate('Remove')}></a>}\r\n                            {removingRow[address.systemId] && <a className=\"table__icon table__icon--accept\" onClick={() => onRemove(address.systemId)} title={translate('Accept')}></a>}\r\n                            {removingRow[address.systemId] && <a className=\"table__icon table__icon--cancel\" onClick={() => this.onRemoveRequest(address.systemId, false)} title={translate('Cancel')}></a>}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddressList;","import React, { Fragment } from 'react';\r\nimport { translate } from '../Services/translation';\r\nimport constants from '../constants';\r\n\r\nconst AddressForm = ({ address = {}, errors = {}, onDismiss, onChange, onSubmit }) => (\r\n    <div>\r\n        <h2>{translate(address.systemId ? 'mypage.address.edittitle' : 'mypage.address.addtitle')}</h2>\r\n\r\n        <div className=\"row\">\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"address\">{translate('mypage.address.address')}</label>\r\n                <input className=\"form__input\" id=\"address\" name=\"address\" type=\"text\" autoComplete=\"address-line1\" value={address.address || ''} onChange={(event) => onChange('address', event.target.value)}/>\r\n                {errors['address'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['address'][0]}</span>\r\n                }\r\n\r\n                <input className=\"form__input\" id=\"address2\" name=\"address2\" type=\"text\" autoComplete=\"address-line2\" value={address.address2 || ''} onChange={(event) => onChange('address2', event.target.value)}/>\r\n                {errors['address2'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['address2'][0]}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"zipCode\">{translate('mypage.address.postnumber')}</label>\r\n                <input className=\"form__input\" id=\"zipCode\" name=\"zipCode\" type=\"text\" autoComplete=\"postal-code\" value={address.zipCode || ''} onChange={(event) => onChange('zipCode', event.target.value)}/>\r\n                {errors['zipCode'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['zipCode'][0]}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"city\">{translate('mypage.address.city')}</label>\r\n                <input className=\"form__input\" id=\"city\" name=\"city\" type=\"text\" autoComplete=\"on\" value={address.city || ''} onChange={(event) => onChange('city', event.target.value)}/>\r\n                {errors['city'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['city'][0]}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"country\">{translate('mypage.address.country')}</label>\r\n                <select className=\"form__input\" autoComplete = \"country-name\" value={address.country || ''} onChange={(event) => onChange('country', event.target.value)}>\r\n                    {constants.countries.map(country => <option key={country.value} value={country.value}>{country.text}</option>)}\r\n                </select>\r\n                {errors['country'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['country'][0]}</span>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"phoneNumber\">{translate('mypage.address.phonenumber')}</label>\r\n                <input className=\"form__input\" id=\"phoneNumber\" name=\"phoneNumber\" type=\"tel\" autoComplete=\"tel\" value={address.phoneNumber || ''} onChange={(event) => onChange('phoneNumber', event.target.value)}/>\r\n                {errors['phoneNumber'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['phoneNumber'][0]}</span>\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n        {errors['general'] && <div>{errors['general'][0]}</div>}\r\n        <button className=\"form__button\" onClick={() => onDismiss()}>{translate('general.cancel')}</button>\r\n        <span className=\"form__space\"></span>\r\n        <button className=\"form__button\" onClick={() => onSubmit(address)}>{translate('general.save')}</button>\r\n    </div>\r\n);\r\n\r\nexport default AddressForm;","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { string, object } from 'yup';\r\nimport AddressList from '../Components/AddressList';\r\nimport AddressForm from '../Components/AddressForm';\r\nimport { query, remove, add, edit, changeMode, setError } from '../Actions/Address.action';\r\nimport { translate } from '../Services/translation';\r\nimport constants from '../constants';\r\n\r\nconst addressSchema = object().shape({\r\n    phoneNumber: string().required(translate(`validation.required`)),\r\n    country: string().required(translate(`validation.required`)),\r\n    city: string().required(translate(`validation.required`)),\r\n    zipCode: string().required(translate(`validation.required`)),\r\n    address2: string().nullable(),\r\n    address: string().required(translate(`validation.required`)),\r\n});\r\n\r\nclass AddressListContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            person: {},\r\n        };\r\n        this.props.query();\r\n    }\r\n\r\n    showForm(address) {\r\n        this.setState({\r\n            address,\r\n        });\r\n        this.props.changeMode('edit');\r\n    }\r\n\r\n    showList() {\r\n        this.setState({\r\n            address: {},\r\n        });\r\n        this.props.changeMode('list');\r\n    }\r\n\r\n    handleAddressInputChange(propName, value) {\r\n        this.setState((prevState) => ({\r\n            ...prevState,\r\n            address: {\r\n                ...prevState.address,\r\n                [propName]: value,\r\n            }\r\n        }));\r\n    }\r\n\r\n    onAddressSubmit(address) {\r\n        addressSchema.validate(address)\r\n            .then(() => {\r\n                if (address.systemId) {\r\n                    this.props.edit(address);\r\n                } else {\r\n                    this.props.add(address);\r\n                }\r\n            })\r\n            .catch(error => this.props.setError(error));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                { this.props.mode !== 'list' && <AddressForm address={this.state.address} \r\n                                                    errors={this.props.errors}\r\n                                                    onDismiss={() => this.showList()} \r\n                                                    onChange={(propName, value) => this.handleAddressInputChange(propName, value)}\r\n                                                    onSubmit={(address) => this.onAddressSubmit(address)}\r\n                                                />}\r\n                { this.props.mode === 'list' && (\r\n                    <Fragment>\r\n                        <h2>{translate('mypage.address.title')}</h2>\r\n                        <p><b>{translate('mypage.address.subtitle')}</b></p>\r\n                        <button className=\"form__button\" onClick={() => this.showForm({ country: constants.countries[0].value })} >{translate('mypage.address.add')}</button>\r\n                        <AddressList addresses={this.props.addresses} \r\n                            onEdit={(address) => this.showForm(address)} \r\n                            onRemove={(id) => this.props.remove(id)} />\r\n                    </Fragment>\r\n                )}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        addresses: state.myPage.addresses.list,\r\n        mode: state.myPage.addresses.mode,\r\n        errors: state.myPage.addresses.errors,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        query: () => dispatch(query()),\r\n        remove: (addressSystemId) => dispatch(remove(addressSystemId)),\r\n        add: (address) => dispatch(add(address)),\r\n        edit: (address) => dispatch(edit(address)),\r\n        changeMode: (mode) => dispatch(changeMode(mode)),\r\n        setError: (error) => dispatch(setError(error)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressListContainer);"],"sourceRoot":""}