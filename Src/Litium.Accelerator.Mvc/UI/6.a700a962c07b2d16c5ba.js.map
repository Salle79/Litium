{"version":3,"sources":["webpack:///./Scripts/constants.js","webpack:///./Scripts/Components/PersonList.js","webpack:///./Scripts/Components/PersonForm.js","webpack:///./Scripts/Containers/PersonList.container.js"],"names":["window","__litium","PersonList","props","state","removingRow","rowSystemId","showDeleteButton","this","setState","previousState","persons","onEdit","onRemove","className","translate","person","key","systemId","firstName","lastName","email","phone","role","editable","onClick","title","onRemoveRequest","Component","PersonForm","errors","onDismiss","onChange","onSubmit","htmlFor","id","name","type","autoComplete","value","event","target","constants","approver","checked","buyer","personSchema","object","shape","string","required","PersonListContainer","query","changeMode","propName","prevState","validate","then","edit","add","error","setError","mode","showList","handlePersonInputChange","onPersonSubmit","showForm","remove","connect","myPage","list","dispatch","personSystemId"],"mappings":"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","file":"6.a700a962c07b2d16c5ba.js","sourcesContent":["export default window.__litium.constants;","import React, { Component, Fragment } from 'react';\r\nimport { translate } from '../Services/translation';\r\n\r\nclass PersonList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            removingRow: {},\r\n        };\r\n    }\r\n\r\n    onRemoveRequest(rowSystemId, showDeleteButton) {\r\n        this.setState(previousState => ({\r\n            ...previousState,\r\n            removingRow: {\r\n                ...previousState.removingRow,\r\n                [rowSystemId]: showDeleteButton,\r\n            }\r\n        }));\r\n    }\r\n\r\n    render () {\r\n        const { persons, onEdit, onRemove } = this.props;\r\n        const { removingRow } = this.state;\r\n        return (\r\n            <div className=\"simple-table\">\r\n                <div className=\"row medium-unstack no-margin simple-table__header\">\r\n                    <div className=\"columns\">{translate('mypage.person.name')}</div>\r\n                    <div className=\"columns\">{translate('mypage.person.email')}</div>\r\n                    <div className=\"columns\">{translate('mypage.person.phone')}</div>\r\n                    <div className=\"columns\">{translate('mypage.person.role')}</div>\r\n                    <div className=\"columns medium-2 hide-for-small-only\"></div>\r\n                </div>\r\n\r\n                {persons && persons.map(person=> (\r\n                    <div className=\"row medium-unstack no-margin\" key={person.systemId}>\r\n                        <div className=\"columns\">{person.firstName} {person.lastName}</div>\r\n                        <div className=\"columns\">{person.email || ''}</div>\r\n                        <div className=\"columns\">{person.phone || ''}</div>\r\n                        <div className=\"columns\">{person.role}</div>\r\n                        <div className=\"columns medium-2\">\r\n                        {person.editable && (\r\n                            <Fragment>\r\n                                <a onClick={() => onEdit(person)} className=\"table__icon table__icon--edit\" title={translate('Edit')}></a>\r\n                                {!removingRow[person.systemId] && <a onClick={() => this.onRemoveRequest(person.systemId, true)} className=\"table__icon table__icon--delete\" title={translate('Remove')}></a>}\r\n                                {removingRow[person.systemId] && <a className=\"table__icon table__icon--accept\" onClick={() => onRemove(person.systemId)} title={translate('Accept')}></a>}\r\n                                {removingRow[person.systemId] && <a className=\"table__icon table__icon--cancel\" onClick={() => this.onRemoveRequest(person.systemId, false)} title={translate('Cancel')}></a>}\r\n                            </Fragment>\r\n                        )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonList;","import React, { Fragment } from 'react';\r\nimport { translate } from '../Services/translation';\r\nimport constants from '../constants';\r\n\r\nconst PersonForm = ({ person, errors = {}, onDismiss, onChange, onSubmit }) => (\r\n    <div>\r\n        <h2>{translate(person.systemId ? 'mypage.person.edittitle' : 'mypage.person.addtitle')}</h2>\r\n        <div className=\"row\">\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"firstName\">{translate('mypage.person.firstname')}</label>\r\n                <input className=\"form__input\" id=\"firstName\" name=\"firstName\" type=\"text\" autoComplete=\"given-name\" value={person.firstName || ''} onChange={(event) => onChange('firstName', event.target.value)}/>\r\n                {errors['firstName'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['firstName'][0]}</span>\r\n                }\r\n            </div>\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"lastName\">{translate('mypage.person.lastname')}</label>\r\n                <input className=\"form__input\" id=\"lastName\" name=\"lastName\" type=\"text\" autoComplete=\"family-name\" value={person.lastName || ''} onChange={(event) => onChange('lastName', event.target.value)}/>\r\n                {errors['lastName'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['lastName'][0]}</span>\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"email\">{translate('mypage.person.email')}</label>\r\n                <input className=\"form__input\" id=\"email\" name=\"email\" type=\"email\" autoComplete = \"email\" value={person.email || ''} onChange={(event) => onChange('email', event.target.value)}/>\r\n                {errors['email'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['email'][0]}</span>\r\n                }\r\n            </div>\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__label\" htmlFor=\"phone\">{translate('mypage.person.phone')}</label>\r\n                <input className=\"form__input\" id=\"phone\" name=\"phone\" type=\"tel\" autoComplete=\"tel\" value={person.phone || ''} onChange={(event) => onChange('phone', event.target.value)}/>\r\n                {errors['phone'] &&\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">{errors['phone'][0]}</span>\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__control\">\r\n                    <input type=\"radio\" name=\"role\" className=\"form__radio\"\r\n                       value={constants.role.approver}\r\n                       checked={person.role === constants.role.approver}\r\n                       onChange={(event) => onChange('role', event.target.value)} />\r\n                    {translate('mypage.person.role.approver')}\r\n                </label>\r\n            </div>\r\n            <div className=\"columns small-12 medium-8\">\r\n                <label className=\"form__control\">\r\n                    <input type=\"radio\" name=\"role\" className=\"form__radio\"\r\n                       value={constants.role.buyer}\r\n                       checked={person.role === constants.role.buyer}\r\n                       onChange={(event) => onChange('role', event.target.value)} />\r\n                    {translate('mypage.person.role.buyer')}\r\n                </label>\r\n            </div>\r\n        </div>\r\n\r\n        {errors['general'] && <div>{errors['general'][0]}</div>}\r\n        <button className=\"form__button\" onClick={() => onDismiss()}>{translate('general.cancel')}</button>\r\n        <span className=\"form__space\"></span>\r\n        <button className=\"form__button\" onClick={() => onSubmit(person)}>{translate('general.save')}</button>\r\n    </div>\r\n);\r\n\r\nexport default PersonForm;","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { string, object } from 'yup';\r\nimport PersonList from '../Components/PersonList';\r\nimport PersonForm from '../Components/PersonForm';\r\nimport { query, remove, add, edit, changeMode, setError } from '../Actions/Person.action';\r\nimport { translate } from '../Services/translation';\r\nimport constants from '../constants';\r\n\r\nconst personSchema = object().shape({\r\n    phone: string().required(translate(`validation.required`)),\r\n    email: string().required(translate(`validation.required`)).email(translate(`validation.email`)),\r\n    lastName: string().required(translate(`validation.required`)),\r\n    firstName: string().required(translate(`validation.required`)),\r\n});\r\n\r\nclass PersonListContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            person: {},\r\n        };\r\n        this.props.query();\r\n    }\r\n\r\n    showForm(person) {\r\n        this.setState({\r\n            person,\r\n        });\r\n        this.props.changeMode('edit');\r\n    }\r\n\r\n    showList() {\r\n        this.setState({\r\n            person: {},\r\n        });\r\n        this.props.changeMode('list');\r\n    }\r\n\r\n    handlePersonInputChange(propName, value) {\r\n        this.setState((prevState) => ({\r\n            ...prevState,\r\n            person: {\r\n                ...prevState.person,\r\n                [propName]: value,\r\n            }\r\n        }));\r\n    }\r\n\r\n    onPersonSubmit(person) {\r\n        if (!person || !person.editable) {\r\n            return;\r\n        }\r\n        personSchema.validate(person)\r\n            .then(() => {\r\n                if (person.systemId) {\r\n                    this.props.edit(person);\r\n                } else {\r\n                    this.props.add(person);\r\n                }\r\n            })\r\n            .catch(error => this.props.setError(error));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                { this.props.mode !== 'list' && <PersonForm person={this.state.person} \r\n                                                    errors={this.props.errors}\r\n                                                    onDismiss={() => this.showList()} \r\n                                                    onChange={(propName, value) => this.handlePersonInputChange(propName, value)}\r\n                                                    onSubmit={(person) => this.onPersonSubmit(person)}\r\n                                                />}\r\n                { this.props.mode === 'list' && (\r\n                    <Fragment>\r\n                        <h2>{translate('mypage.person.title')}</h2>\r\n                        <p><b>{translate('mypage.person.subtitle')}</b></p>\r\n                        <button className=\"form__button\" onClick={() => this.showForm({ role: constants.role.approver, editable: true })} >{translate('mypage.person.add')}</button>\r\n                        <PersonList persons={this.props.persons} \r\n                            onEdit={(person) => this.showForm(person)} \r\n                            onRemove={(id) => this.props.remove(id)} />\r\n                    </Fragment>\r\n                )}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        persons: state.myPage.persons.list,\r\n        mode: state.myPage.persons.mode,\r\n        errors: state.myPage.persons.errors,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        query: () => dispatch(query()),\r\n        remove: (personSystemId) => dispatch(remove(personSystemId)),\r\n        add: (person) => dispatch(add(person)),\r\n        edit: (person) => dispatch(edit(person)),\r\n        changeMode: (mode) => dispatch(changeMode(mode)),\r\n        setError: (error) => dispatch(setError(error)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonListContainer);"],"sourceRoot":""}